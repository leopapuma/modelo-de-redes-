# Tutorial de NetworkX en Google Colab
**Autor:** [Flores Moreno Damian]  
**Curso:** [Investigacion de operaciones]  
**Fecha:** [07/09/2025]

---

## 游닀 Introducci칩n
En este tutorial aprenderemos a utilizar la librer칤a **NetworkX**, una herramienta muy potente en Python para el an치lisis y visualizaci칩n de grafos y redes.  
Veremos c칩mo crear grafos, a침adir nodos y aristas, personalizar atributos y realizar an치lisis b치sicos.
# Instalaci칩n (si es necesario en Colab)
!pip install networkx matplotlib

# Importar librer칤as
import networkx as nx
import matplotlib.pyplot as plt


# Crear un grafo dirigido
G = nx.DiGraph()

# Agregar nodos
G.add_node("A")
G.add_nodes_from(["B", "C", "D"])  # a침adir varios a la vez

# Agregar aristas
G.add_edge("A", "B")
G.add_edges_from([("B", "C"), ("C", "D"), ("B", "D"), ("A", "C")])

# Dibujar el grafo
nx.draw(G, with_labels=True, node_color='lightblue', edge_color='gray',
        node_size=2000, arrows=True)
plt.title("Grafo dirigido")
plt.show()
# A침adir atributos a los nodos
G.nodes["A"]["tipo"] = "inicio"
G.nodes["D"]["tipo"] = "fin"

# A침adir atributos a las aristas
G["A"]["B"]["peso"] = 5
G["B"]["C"]["peso"] = 3

# Ver nodos con atributos
print(G.nodes(data=True))

# Ver aristas con atributos
print(G.edges(data=True))
# Grado de cada nodo
print("Grado de nodos:", dict(G.degree()))

# Camino m치s corto de A a D
print("Camino m치s corto de A a D:", nx.shortest_path(G, source="A", target="D"))

# Centralidad
centralidad = nx.degree_centrality(G)
print("Centralidad de los nodos:", centralidad)
En este tutorial vimos c칩mo:
- Crear y visualizar grafos con **NetworkX**.
- A침adir nodos, aristas y atributos.
- Calcular medidas b치sicas como grado, caminos m치s cortos y centralidad.

NetworkX es muy 칰til en 치reas como:
- Redes sociales.
- An치lisis de transporte.
- Biolog칤a de redes.
- Comunicaci칩n de datos.
